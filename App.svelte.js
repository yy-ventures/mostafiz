/* src/App.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "./_snowpack/pkg/svelte/internal.js";

import Navbar from "./components/Navbar.svelte.js";
import Contact from "./pages/Contact.svelte.js";
import Home from "./pages/Home.svelte.js";
import News from "./pages/News.svelte.js";
import About from "./pages/About.svelte.js";
import { Router, Route } from "./_snowpack/pkg/svelte-navigator.js";
import "./styles/resets.css.proxy.js";
import "./styles/globals.css.proxy.js";
import "./styles/navigation.css.proxy.js";
import "./styles/utils.css.proxy.js";

function create_default_slot_4(ctx) {
	let home;
	let current;
	home = new Home({});

	return {
		c() {
			create_component(home.$$.fragment);
		},
		m(target, anchor) {
			mount_component(home, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(home.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(home.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(home, detaching);
		}
	};
}

// (1:68) <Route path="news">
function create_default_slot_3(ctx) {
	let news;
	let current;
	news = new News({});

	return {
		c() {
			create_component(news.$$.fragment);
		},
		m(target, anchor) {
			mount_component(news, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(news.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(news.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(news, detaching);
		}
	};
}

// (1:108) <Route path="about">
function create_default_slot_2(ctx) {
	let about;
	let current;
	about = new About({});

	return {
		c() {
			create_component(about.$$.fragment);
		},
		m(target, anchor) {
			mount_component(about, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(about.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(about.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(about, detaching);
		}
	};
}

// (1:151) <Route path="contact">
function create_default_slot_1(ctx) {
	let contact;
	let current;
	contact = new Contact({});

	return {
		c() {
			create_component(contact.$$.fragment);
		},
		m(target, anchor) {
			mount_component(contact, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(contact.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(contact.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(contact, detaching);
		}
	};
}

// (1:0) <Router>
function create_default_slot(ctx) {
	let navbar;
	let main;
	let route0;
	let route1;
	let route2;
	let route3;
	let current;
	navbar = new Navbar({});

	route0 = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "news",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				path: "about",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	route3 = new Route({
			props: {
				path: "contact",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(navbar.$$.fragment);
			main = element("main");
			create_component(route0.$$.fragment);
			create_component(route1.$$.fragment);
			create_component(route2.$$.fragment);
			create_component(route3.$$.fragment);
		},
		m(target, anchor) {
			mount_component(navbar, target, anchor);
			insert(target, main, anchor);
			mount_component(route0, main, null);
			mount_component(route1, main, null);
			mount_component(route2, main, null);
			mount_component(route3, main, null);
			current = true;
		},
		p(ctx, dirty) {
			const route0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
			const route3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route3_changes.$$scope = { dirty, ctx };
			}

			route3.$set(route3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			transition_in(route3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navbar.$$.fragment, local);
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			transition_out(route3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navbar, detaching);
			if (detaching) detach(main);
			destroy_component(route0);
			destroy_component(route1);
			destroy_component(route2);
			destroy_component(route3);
		}
	};
}

function create_fragment(ctx) {
	let router;
	let current;

	router = new Router({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(router.$$.fragment);
		},
		m(target, anchor) {
			mount_component(router, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const router_changes = {};

			if (dirty & /*$$scope*/ 1) {
				router_changes.$$scope = { dirty, ctx };
			}

			router.$set(router_changes);
		},
		i(local) {
			if (current) return;
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(router, detaching);
		}
	};
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default App;